
REST is acronym for REpresentational State Transfer.
1) stateless

error code:
-----------
200 (OK)	This is the standard response for successful HTTP requests.
201 (CREATED)	This is the standard response for an HTTP request that resulted in an item being successfully created.
204 (NO CONTENT)	This is the standard response for successful HTTP requests, where nothing is being returned in the response body.
400 (BAD REQUEST)	The request cannot be processed because of bad request syntax, excessive size, or another client error.
403 (FORBIDDEN)	The client does not have permission to access this resource.
404 (NOT FOUND)	The resource could not be found at this time. It is possible it was deleted, or does not exist yet.
500 (INTERNAL SERVER ERROR)	The generic answer for an unexpected failure if there is no more specific information available.


example code:
GET — retrieve a specific resource (by id) or a collection of resources — return 200 (OK)
POST — create a new resource — return 201 (CREATED)
PUT — update a specific resource (by id) — return 200 (OK)
DELETE — remove a specific resource by id — return 204 (NO CONTENT) If the operation fails, return the most specific status code possible corresponding to the problem that was encountered.




CODE:
=========
# Using flask to make an api 
# import necessary libraries and functions 
from flask import Flask, jsonify, request 
  
# creating a Flask app 
app = Flask(__name__) 
  
# on the terminal type: curl http://127.0.0.1:5000/ 
# returns hello world when we use GET. 
# returns the data that we send when we use POST. 
@app.route('/', methods = ['GET', 'POST']) 
def home(): 
    if(request.method == 'GET'): 
  
        data = "hello world"
        return jsonify({'data': data}) 
  
  
# A simple function to calculate the square of a number 
# the number to be squared is sent in the URL when we use GET 
# on the terminal type: curl http://127.0.0.1:5000 / home / 10 
# this returns 100 (square of 10) 
@app.route('/home/<int:num>', methods = ['GET']) 
def disp(num): 
  
    return jsonify({'data': num**2}) 
  
  
# driver function 
if __name__ == '__main__': 
    app.run(debug = True) 

================================
o/p---2:
--------
$ python3 app.py
--> running on http://127.0.0.1:5000/


o/p---2:
--------
$ curl http://127.0.0.1:5000/
{
""
}
$ curl http://127.0.0.1:5000/home/7
{
"data": 49
}
================================